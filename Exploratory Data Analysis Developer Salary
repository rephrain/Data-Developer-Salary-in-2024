{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8653190,"sourceType":"datasetVersion","datasetId":5183463}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rephrainarchaimeric/exploratory-data-analysis-developer-salary?scriptVersionId=186608415\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv(\"/kaggle/input/data-eng-salary-2024/Dataset salary 2024.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:40.840642Z","iopub.execute_input":"2024-07-03T02:08:40.841Z","iopub.status.idle":"2024-07-03T02:08:40.874273Z","shell.execute_reply.started":"2024-07-03T02:08:40.840973Z","shell.execute_reply":"2024-07-03T02:08:40.873105Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Explore how many unique values in categorical data","metadata":{}},{"cell_type":"code","source":"df.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:41.953556Z","iopub.execute_input":"2024-07-03T02:08:41.95387Z","iopub.status.idle":"2024-07-03T02:08:41.972977Z","shell.execute_reply.started":"2024-07-03T02:08:41.953848Z","shell.execute_reply":"2024-07-03T02:08:41.971724Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Check each data types","metadata":{}},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:44.75551Z","iopub.execute_input":"2024-07-03T02:08:44.75582Z","iopub.status.idle":"2024-07-03T02:08:44.76707Z","shell.execute_reply.started":"2024-07-03T02:08:44.755796Z","shell.execute_reply":"2024-07-03T02:08:44.765734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Remote Ratio Each Year**: 2020 & 2021 more WFH, 2022 balanced WFH and WFO, 2023 & 2024 more WFO","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncontingency_table1 = pd.crosstab(df['work_year'], df['remote_ratio'])\n\ncontingency_table_proportions = contingency_table1.div(contingency_table1.sum(axis=1), axis=0)\n\nplt.figure(figsize=(15, 8))\nsns.heatmap(contingency_table_proportions, annot=True, fmt='.2%', cmap='YlGnBu')\nplt.title('Contingency Table Heatmap between Work Year and Remote Ratio')\nplt.xlabel('Remote Ratio')\nplt.ylabel('Work Year')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:45.859556Z","iopub.execute_input":"2024-07-03T02:08:45.860274Z","iopub.status.idle":"2024-07-03T02:08:46.713383Z","shell.execute_reply.started":"2024-07-03T02:08:45.860248Z","shell.execute_reply":"2024-07-03T02:08:46.71204Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Top 10 Job Title With The Highest Salary**","metadata":{}},{"cell_type":"code","source":"median_salaries = df.groupby('job_title')['salary_in_usd'].median().reset_index()\n\ntop_10_jobs = median_salaries.sort_values(by='salary_in_usd', ascending=False).head(10)\n\nplt.figure(figsize=(12, 8))\nsns.barplot(x='salary_in_usd', y='job_title', data=top_10_jobs, palette='viridis')\nplt.title('Top 10 Jobs with Highest Salary')\nplt.xlabel('Salary')\nplt.ylabel('Job')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:46.92113Z","iopub.execute_input":"2024-07-03T02:08:46.921472Z","iopub.status.idle":"2024-07-03T02:08:47.170103Z","shell.execute_reply.started":"2024-07-03T02:08:46.92145Z","shell.execute_reply":"2024-07-03T02:08:47.168991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Encode categorical column with label encoder (0,1,...)","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\ndf_test = df[[\"work_year\",\"experience_level\",\"employment_type\",\"job_title\",\"salary_in_usd\",\"employee_residence\",\"remote_ratio\",\"company_location\",\"company_size\"]]\n\nlabel_encoder = LabelEncoder()\ncolumns_to_encode = ['experience_level','employment_type','job_title','employee_residence','company_location','company_size']\n\nfor column in columns_to_encode:\n    df_test[column] = label_encoder.fit_transform(df_test[column])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:08:51.191582Z","iopub.execute_input":"2024-07-03T02:08:51.191912Z","iopub.status.idle":"2024-07-03T02:08:51.290915Z","shell.execute_reply.started":"2024-07-03T02:08:51.191887Z","shell.execute_reply":"2024-07-03T02:08:51.290009Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Correlation between each feature with salary in usd. The results don't say much because the correlation of all features are low. But **experience level**, **employee residence**, **company location**, and **job title** have a significant correlation compared to the other features.","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfeatures = [\"work_year\",\"experience_level\",\"employment_type\",\"job_title\",\"employee_residence\",\"remote_ratio\",\"company_location\",\"company_size\"]\nlabel = 'salary_in_usd'\n\ncorrelation_coefficients = {feature: stats.pointbiserialr(df_test[feature], df_test[label])[0] for feature in features}\n\ncorrelation_df = pd.DataFrame(list(correlation_coefficients.items()), columns=['Band', 'Correlation'])\n\ncorrelation_df = correlation_df.sort_values(by='Correlation', ascending=False)\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Correlation', y='Band', data=correlation_df, palette='viridis')\nplt.title(\"Correlation Between Features and Salary\")\nplt.xlabel(\"\")\nplt.ylabel('')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T02:09:02.180173Z","iopub.execute_input":"2024-07-03T02:09:02.180572Z","iopub.status.idle":"2024-07-03T02:09:02.478263Z","shell.execute_reply.started":"2024-07-03T02:09:02.180544Z","shell.execute_reply":"2024-07-03T02:09:02.477379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"For better understanding, use heatmap to visualize correlation between each feature. The results are not really meaningful, but turns out employees tend to work in the same location with company location (*based on strong positive correlation between employee residence and company location*).","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr_matrix = df_test[[\"work_year\",\"experience_level\",\"employment_type\",\"job_title\",\"employee_residence\",\"remote_ratio\",\"company_location\",\"company_size\"]].corr()\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title('Heatmap Features')\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"columns = [\"work_year\",\"experience_level\",\"employment_type\",\"job_title\",\"employee_residence\",\"remote_ratio\",\"company_location\",\"company_size\"]\n\nX = df_test[columns]\ny = df_test['salary_in_usd']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Choose Best Linkage Method**: Using Dendrogram. Which dendrogra. Which dendrogram each data is well-clustered. You can do this by looking at the distance from the division of the dendrogram, if there is a significant distance, it means that the results are well-clustered.","metadata":{}},{"cell_type":"markdown","source":"**Ward**: Shows distinct and well-separated clusters. The vertical distances between merges (height of the lines) are relatively high, indicating that clusters are merged only when they are quite close together.","metadata":{}},{"cell_type":"code","source":"import scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt\n\ndendrogram = sch.dendrogram(sch.linkage(X, method=\"ward\"))\nplt.title(\"Dendrogram (Ward)\")\nplt.xlabel(\"Customers\")\nplt.ylabel(\"Euclidean Distances\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Complete**: Generally results in more balanced and spherical clusters. The clusters in the dendrogram are clear, but there might be some chaining effect where some points form elongated clusters.","metadata":{}},{"cell_type":"code","source":"import scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt\n\ndendrogram = sch.dendrogram(sch.linkage(X, method=\"complete\"))\nplt.title(\"Dendrogram (Complete)\")\nplt.xlabel(\"Customers\")\nplt.ylabel(\"Euclidean Distances\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Average**: Shows moderate separation between clusters. It tends to balance between single and complete linkage, providing more evenly sized clusters than single linkage but less compact than complete linkage.","metadata":{}},{"cell_type":"code","source":"import scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt\n\ndendrogram = sch.dendrogram(sch.linkage(X, method=\"average\"))\nplt.title(\"Dendrogram (Average)\")\nplt.xlabel(\"Customers\")\nplt.ylabel(\"Euclidean Distances\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Single**: Often results in elongated clusters due to the chaining effect, where clusters may continue to grow by adding the nearest points, leading to less distinct separation between clusters.","metadata":{}},{"cell_type":"code","source":"import scipy.cluster.hierarchy as sch\nimport matplotlib.pyplot as plt\n\ndendrogram = sch.dendrogram(sch.linkage(X, method=\"single\"))\nplt.title(\"Dendrogram (Single)\")\nplt.xlabel(\"Customers\")\nplt.ylabel(\"Euclidean Distances\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Ward Linkage** method seems to be the best choice based on the clarity and separation of clusters in the dendrogram. It minimizes the variance within clusters, leading to more compact and well-defined clusters. If your goal is to achieve distinct and interpretable clusters, Ward linkage would be the recommended method.","metadata":{}},{"cell_type":"markdown","source":"**CONCLUSION**: Ward Linkage with 4 cluster","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import AgglomerativeClustering\nimport matplotlib.pyplot as plt\n\nac = AgglomerativeClustering(n_clusters=4, metric=\"euclidean\", linkage=\"ward\")\nac.fit(X)\ndf[\"cluster\"] = ac.labels_\ndf.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Median Salary Each Cluster**\n1. Cluster 1: **166.000**\n2. Cluster 0: **145.360**\n3. Cluster 3: **133.000**\n4. Cluster 2: **83.864**","metadata":{}},{"cell_type":"code","source":"avg_salaries = df.groupby('cluster')['salary_in_usd'].median()\nprint(\"Median Salary Each Cluster\",avg_salaries.tolist())","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"| Cluster | Work Year | Experience Level | Employment Type | Remote Ratio | Company Size | Job Title          | Employee Residence | Company Location | Median Salary  |\n|---------|-----------|------------------|-----------------|--------------|--------------|--------------------|--------------------|------------------|----------------|\n| 0       | 2022      | Senior Level     | Contract        | Remote       | Small        | Data Architect     | Netherlands        | Netherlands      | **145,360**    |\n| 1       | 2024      | Senior Level     | Full Time       | Onsite       | Medium       | Research Engineer  | United States      | United States    | **166,000**    |\n| 2       | 2020      | Entry Level      | Freelance       | Hybrid       | Large        | Other              | United Kingdom     | United Kingdom   | **83,864**     |\n| 3       | 2024      | Entry Level      | Full Time       | Onsite       | Small        | Applied Scientist  | United States      | United States    | **133,000**    |","metadata":{}},{"cell_type":"code","source":"categorical_columns = [\"work_year\", \"experience_level\", \"employment_type\", \"remote_ratio\", \"company_size\"]\n\ndef plot_combined_bar_charts(df, column):\n    unique_values = df[column].unique()\n    \n    proportions = []\n    \n    for value in unique_values:\n        value_counts = df[df[column] == value]['cluster'].value_counts(normalize=True).sort_index()\n        for cluster, proportion in value_counts.items():\n            proportions.append([value, cluster, proportion])\n    \n    prop_df = pd.DataFrame(proportions, columns=[column, 'cluster', 'proportion'])\n    \n    plt.figure(figsize=(14, 8))\n    sns.barplot(x=column, y='proportion', hue='cluster', data=prop_df, palette='viridis')\n    plt.title(f'Proportion of Clusters by {column}')\n    plt.xlabel(column)\n    plt.ylabel('Proportion')\n    plt.ylim(0, 1)\n    plt.legend(title='Cluster', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    plt.show()\n\nfor column in categorical_columns:\n    plot_combined_bar_charts(df, column)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def group_top_n(df, column, top_n=10):\n    top_categories = df[column].value_counts().nlargest(top_n).index\n    df[column] = df[column].apply(lambda x: x if x in top_categories else 'Other')\n    return df\n\ncategorical_columns = [\"job_title\", \"employee_residence\", \"company_location\"]\n\ntop_n = 10\ndf_test_top_n = df.copy()  \nfor column in categorical_columns:\n    df_test_top_n = group_top_n(df_test_top_n, column, top_n)\n\ndef plot_combined_bar_charts(df, column):\n    proportions = []\n    unique_values = df[column].unique()\n    \n    for value in unique_values:\n        value_counts = df[df[column] == value]['cluster'].value_counts(normalize=True).sort_index()\n        for cluster, proportion in value_counts.items():\n            proportions.append([value, cluster, proportion])\n    \n    prop_df = pd.DataFrame(proportions, columns=[column, 'cluster', 'proportion'])\n    \n    plt.figure(figsize=(14, 8))\n    sns.barplot(x=column, y='proportion', hue='cluster', data=prop_df, palette='viridis')\n    plt.title(f'Proportion of Clusters by {column}')\n    plt.xlabel(column)\n    plt.xticks(rotation=15)\n    plt.ylabel('Proportion')\n    plt.ylim(0, 1)\n    plt.legend(title='Cluster', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    plt.show()\n\nfor column in categorical_columns:\n    plot_combined_bar_charts(df_test_top_n, column)","metadata":{},"execution_count":null,"outputs":[]}]}